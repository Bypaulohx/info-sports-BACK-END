package com.sportsinfo.user; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.*; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import java.util.List; @Service public class UserService implements UserDetailsService { private final UserRepository repo; private final PasswordEncoder enc; public UserService(UserRepository repo, PasswordEncoder enc){ this.repo=repo; this.enc=enc; } public User register(String name,String email,String phone,String rawPassword){ if (repo.findByEmail(email).isPresent()) throw new IllegalArgumentException("Email já cadastrado"); User u = User.builder().name(name).email(email).phone(phone).passwordHash(enc.encode(rawPassword)).role(Role.USER).build(); return repo.save(u);} @Transactional(readOnly=true) public User getByEmail(String email){ return repo.findByEmail(email).orElseThrow(()-> new UsernameNotFoundException("Usuário não encontrado")); } @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { User u = getByEmail(username); return new org.springframework.security.core.userdetails.User(u.getEmail(), u.getPasswordHash(), List.of(new SimpleGrantedAuthority("ROLE_"+u.getRole().name()))); } }
