package com.sportsinfo.user; import com.sportsinfo.common.ApiResponse; import jakarta.validation.constraints.NotBlank; import org.springframework.http.ResponseEntity; import org.springframework.security.core.annotation.AuthenticationPrincipal; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.web.bind.annotation.*; import java.util.List; @RestController @RequestMapping("/api/users") public class UserController { private final UserRepository users; private final FavoriteRepository favs; public UserController(UserRepository users, FavoriteRepository favs){ this.users=users; this.favs=favs; } public record UpdateThemeRequest(@NotBlank String theme){} @GetMapping("/me") public ResponseEntity<ApiResponse<User>> me(@AuthenticationPrincipal UserDetails ud){ if (ud==null) return ResponseEntity.status(401).body(ApiResponse.error("Não autenticado")); return users.findByEmail(ud.getUsername()).map(u->ResponseEntity.ok(ApiResponse.ok(u))).orElse(ResponseEntity.status(404).body(ApiResponse.error("Usuário não encontrado"))); } @PatchMapping("/me/theme") public ResponseEntity<ApiResponse<String>> updateTheme(@AuthenticationPrincipal UserDetails ud, @RequestBody UpdateThemeRequest req){ if (ud==null) return ResponseEntity.status(401).body(ApiResponse.error("Não autenticado")); return users.findByEmail(ud.getUsername()).map(u->{ u.setTheme(req.theme()); users.save(u); return ResponseEntity.ok(ApiResponse.msg("Tema atualizado para "+req.theme())); }).orElse(ResponseEntity.status(404).body(ApiResponse.error("Usuário não encontrado"))); } public record FavoriteRequest(String entityType, String entityId, String name, String sport){} @PostMapping("/{userId}/favorites") public ResponseEntity<ApiResponse<Favorite>> addFavorite(@PathVariable Long userId, @RequestBody FavoriteRequest req){ return users.findById(userId).map(u->{ Favorite f = Favorite.builder().user(u).entityType(req.entityType()).entityId(req.entityId()).name(req.name()).sport(req.sport()).build(); favs.save(f); return ResponseEntity.ok(ApiResponse.ok(f)); }).orElse(ResponseEntity.status(404).body(ApiResponse.error("Usuário não encontrado"))); } @GetMapping("/{userId}/favorites") public ResponseEntity<ApiResponse<List<Favorite>>> listFavorites(@PathVariable Long userId){ return ResponseEntity.ok(ApiResponse.ok(favs.findByUserId(userId))); } @DeleteMapping("/favorites/{favoriteId}") public ResponseEntity<ApiResponse<String>> deleteFavorite(@PathVariable Long favoriteId){ favs.deleteById(favoriteId); return ResponseEntity.ok(ApiResponse.msg("Favorito removido")); } }
